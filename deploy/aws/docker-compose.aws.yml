version: '3.8'

services:
  # Application service optimized for AWS
  app:
    build:
      context: ../..
      dockerfile: Dockerfile
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/threat-detection-platform:${VERSION:-latest}
    container_name: threatdetection-app
    restart: always
    depends_on:
      - postgres
      - redis
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=aws,demo
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/threatdetection
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DEMO_MODE=true
      - JAVA_TOOL_OPTIONS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Dspring.jpa.hibernate.ddl-auto=create-drop
    volumes:
      - ./logs:/app/logs
      - ./demo-data:/app/demo-data
    networks:
      - threatdetection-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database with demo data initialization
  postgres:
    image: postgres:14-alpine
    container_name: threatdetection-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=threatdetection
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - threatdetection-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: threatdetection-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - threatdetection-network

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: threatdetection-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - threatdetection-network

  # Monitoring stack
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: threatdetection-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - threatdetection-network

  grafana:
    image: grafana/grafana:9.5.1
    container_name: threatdetection-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${DOMAIN_NAME}/grafana/
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - threatdetection-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  threatdetection-network:
    driver: bridge
